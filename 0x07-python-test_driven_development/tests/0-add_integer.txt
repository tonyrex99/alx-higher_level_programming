The ``0-add_integer`` module
============================

Using ``add_integer``
---------------------

Import function from module:

	>>> add_integer = __import__('0-add_integer').add_integer

One int argument:

	>>> add_integer(1)
	99

One float argument:

	>>> add_integer(11.9)
	109

One zero argument:

	>>> add_integer(0)
	98

Negative argument:

	>>> add_integer(-5)
	93

One string argument:

	>>> add_integer('foo')
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "/home/sneha/holbertonschool-higher_level_programming/0x07-python	-test_driven_development/0-add_integer.py", line 4, in add_integer
		raise TypeError("a must be an integer")
	TypeError: a must be an integer

Zero argument passed:

	>>> add_integer()
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	TypeError: add_integer() missing 1 required positional argument: 'a'

Two int arguments:

	>>> add_integer(25, 33)
	58

Two float arguments:

	>>> add_integer(66.5, 33.7)
	99

One int and one float argument:

	>>> add_integer(66.5, 44)
	110

One zero and one int argument:

	>>> add_integer(0, 44)
	44

two zero arguments:

	>>> add_integer(0, 0)
	0

One float and negative integer:

	>>> add_integer(100.3, -2)
	98

One string and one integer:

	>>> add_integer('foo', 2)
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "/home/sneha/holbertonschool-higher_level_programming/0x07-python	-test_driven_development/0-add_integer.py", line 4, in add_integer
		raise TypeError("a must be an integer")
	TypeError: a must be an integer

both strings:

	>>> add_integer('foo', 'fu')
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "/home/sneha/holbertonschool-higher_level_programming/0x07-python	-test_driven_development/0-add_integer.py", line 4, in add_integer
		raise TypeError("a must be an integer")
	TypeError: a must be an integer
